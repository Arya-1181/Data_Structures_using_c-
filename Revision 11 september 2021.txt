#include <bits/stdc++.h>

using namespace std;

struct node{
    public:
    int data;
    node *next;
};
// using iteration
node* merge(node* &head, node* &head2){
    node *a = head;
    node *b = head2;
    node *dummy = new node();
    node *c = dummy;
    while (a!=NULL && b!=NULL){
        if (a -> data <= b -> data){
            c -> next = a;
            a  = a -> next;
        }
        else if (b -> data < a -> data){
            c -> next = b;
            b = b -> next;
        }
        c = c -> next;
    }
    while (a!=NULL){
        c -> next = a;
        a = a -> next;
        c = c -> next;
    }
    while (b!=NULL){
        c -> next = b;
        b = b -> next;
        c = c -> next;
    }
    
    return dummy -> next;
}
//using recursion ( better method )
node *merge_through_recursion(node* &head,node* &head2){
    
    if (head==NULL)
    return head2;
    
    else if (head2==NULL)
    return head;
    
    node *result = NULL;
    if (head -> data < head2 -> data){
        result = head;
        result -> next = merge_through_recursion(head -> next,head2);
    }
    else {
        result = head2;
        result -> next = merge_through_recursion(head,head2 -> next);
    }
    return result;
}

void reverse(node **head){
    node *before = new node();
    node *current = new node();
    node *after = new node();
    current = *head;
    before = NULL;
    after = NULL;
    while (current!=NULL){
        after = current -> next;
        current -> next = before;
        before = current;
        current = after;
    }
    *head = before;
}

void del(node *head,int key){
    node *temp = new node();
    node *before = new node();
    
    temp = head;
    before = NULL;
    while (temp->data!= key){
        before = temp;
        temp = temp -> next;
    }
    before -> next = temp -> next;
    free(temp);
}

void addfront(node **head,int key){
    node *temp=new node();
    temp -> data = key;
    temp -> next = *head;
    *head = temp;
}

int length(node *head){
    node *temp=NULL;
    temp = new node();
    temp = head;
    int count=0;
    while (temp!=0){
        temp = temp -> next;
        count++;
    }
    return count;
}

int getcount(node *head){
    node *temp=NULL;
    temp = head;
    if (temp==NULL)
    return 0;
    
    else 
    return 1 + getcount(temp -> next);
}
// Global variable causes memory leak
void gethead(node *head){
    if (head!=NULL){
        node *temp = head;
        head = head -> next;
        
        free (temp);
    }
} 
// Goes wrong if return value not assigned
node *gothead(node *head){
    if (head!=NULL){
        node *temp = head;
        head = head -> next;
        
        free (temp);
    }
    return head;
}
//Best method
void gettinghead(node **head){
    if (*head!=NULL){
        node *temp = *head;
        (*head) = (*head) -> next;
        
        free (temp);
    }
}

int main()
{
   node *head=NULL;
   node *second=NULL;
   node *third=NULL;
   node *forth=NULL;
   node *fifth=NULL;
   node *head2=NULL;
   node *second2=NULL;
   node *third2=NULL;
   node *forth2=NULL;
   node *fifth2=NULL;
   
   head = new node();
   second = new node();
   third = new node();
   forth = new node();
   fifth = new node();
   head2 = new node();
   second2 = new node();
   third2 = new node();
   forth2 = new node();
   fifth2 = new node();
   
   head -> data = 1;
   head -> next = second;
   
   second -> data = 2;
   second -> next = third;
   
   third -> data = 3;
   third -> next = forth;
   
   forth -> data = 4;
   forth -> next = fifth;
   
   fifth -> data = 5;
   fifth -> next = NULL;
   
   head2 -> data = 10;
   head2 -> next = second2;
   
   second2 -> data = 20;
   second2 -> next = third2;
   
   third2 -> data = 30;
   third2 -> next = forth2;
   
   forth2 -> data = 40;
   forth2 -> next = fifth2;
   
   fifth2 -> data = 50;
   fifth2 -> next = NULL;
   
   node *temp = head;
   node *temp2 = head2;
//   node *temp3 = merge(head,head2);
   node *temp3 = merge_through_recursion(head,head2);
//   gethead(head);
//   gothead(head);
//   gettinghead(&head);

//    del(head,3);
//    addfront(&head,10);
//      reverse(&head);

    while (temp!=NULL){
       cout<<temp -> data<<" ";
       temp = temp -> next;
    }

    cout<<endl;

    while (temp2!=NULL){
        cout<<temp2 -> data<<" ";
        temp2 = temp2 -> next;
    }
    cout<<endl;

    while (temp3!=NULL){
        cout<<temp3 -> data<<" ";
        temp3 = temp3 -> next;
    }

    
//    cout<<endl<<length(head)<<endl<<getcount(head)<<endl;
/*    
     while (temp!=NULL){
       cout<<temp -> data<<" ";
       temp = temp -> next;
    }
    */
   return 0;
}
