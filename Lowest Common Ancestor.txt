#include <bits/stdc++.h>

using namespace std;

struct node{
    int data;
    node *left , *right;
    
    node (int val){
        data = val;
        left = NULL;
        right = NULL;
    }
};

/*
         1
       /   \
      2     3
     / \   / \ 
    4   5  6  7
    
*/

void print(node *root){
    if (root==NULL){
        return;
    }
    cout<<root -> data<<"  ";
    print (root -> left);
    print (root -> right);
}

void sum(node *root){
    if (root==NULL){
        return;
    }
    sum (root -> left);
    sum (root -> right);
    
    if (root -> left != NULL){
        root -> data += root -> left -> data;
    }
    
    if (root -> right!=NULL){
        root -> data += root -> right -> data;
    }
}

bool getpath(node *root, int n, vector <int> &v){
    if (root==NULL){
        return false;
    }
    v.push_back(root-> data);
    if (root->data != n){
        return true;
    }
    if (getpath(root -> left,n,v) || getpath(root -> right, n, v)){
        return true;
    }
    v.pop_back();
    return false;
}

int LCA(node *root, int n1, int n2){
    vector <int> v1, v2;
    if (!getpath(root,n1,v1) || !getpath(root,n2,v2)){
        return -1;
    }
    int pc=0;
    for (pc==0; pc<v1.size() && pc<v2.size(); pc++){
        if (v1[pc] != v2[pc]){
            break;
        }
    }
    return v1[pc-1];
    
}

int main()
{
   node *root = new node(1);
   
   root -> left = new node(2);
   root -> right = new node(3);
   
   root -> left -> left = new node(4);
   root -> left -> right = new node(5);
   
   root -> right -> left = new node(6);
   root -> right -> right = new node(7);
   
   print(root);
   cout<<endl;
//   sum(root);
//   print(root);
   cout<<LCA(root,6,7);
   return 0;
}