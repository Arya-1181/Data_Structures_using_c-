#include <bits/stdc++.h>

using namespace std;

struct node{
    int data;
    node *left , *right;
    
    node (int val){
        data = val;
        left = NULL;
        right = NULL;
    }
};

/*
         1
       /   \
      2     3
     / \   / \ 
    4   5  6  7
    
*/

void print(node *root){
    if (root==NULL){
        return;
    }
    cout<<root -> data<<"  ";
    print (root -> left);
    print (root -> right);
}


void right_view (node *root){
    if (root == NULL){
        return;
    }
    queue <node*> q;
    q.push(root);
    
    while (!q.empty()){
        int n = q.size();
        for (int i=0; i<n; i++){
            node *curr = q.front();
            q.pop();
            
            if (i==n-1){
                cout<<curr -> data<<"  ";
            }
            
            if (curr -> left != NULL){
                q.push(curr -> left);
            }
            
            if (curr -> right != NULL){
                q.push(curr -> right);
            }
            
        }
    }
}

void left_view (node *root){
    if (root == NULL){
        return;
    }
    queue <node*> q;
    q.push(root);
    
    while (!q.empty()){
        int n = q.size();
        
        for (int i=1; i<=n; i++){
            node *temp = q.front();
            q.pop();
            
            if (i==1){
                cout <<temp -> data<<"  ";
            }
            
            if (temp -> left != NULL){
                q.push(temp -> left);
            }
            
            if (temp -> right != NULL){
                q.push(temp -> right);
            }
        }
    }
}

int main()
{
   node *root = new node(1);
   
   root -> left = new node(2);
   root -> right = new node(3);
   
   root -> left -> left = new node(4);
   root -> left -> right = new node(5);
   
   root -> right -> left = new node(6);
   root -> right -> right = new node(7);
   
   print(root);
   cout<<endl;
//   sum(root);
   print(root);
   cout<<endl;
   cout<<balanced(root);
   cout<<endl;
   right_view(root);
   cout<<endl;
   left_view(root);
   return 0;
}