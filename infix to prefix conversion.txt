int prec(char c){
    if (c=='^')
    return 3;
    
    else if (c=='*'||c=='/')
    return 2;
    
    else if (c=='+'||c=='-')
    return 1;
    
    return -1;
}

void reverse_brackets(string s){
    for (int i=0; i<s.length(); i++){
        if(s[i]=='(')
        s[i] = ')';
        
        if (s[i]==')')
        s[i] = '(';
    }
}

string infix_to_prefix(string s){
    stack <char> st;
    
    reverse(s.begin(),s.end());
    reverse_brackets(s);
    
    string res="";
    
    for (int i=0; i<s.length(); i++){
        if (s[i]>='A'&&s[i]<='z'){
            res += s[i];
        }
        else if (s[i]=='(') {
            st.push(s[i]);
        }
        else if (s[i]==')') {
            while (!st.empty() && st.top()!='('){
                res += st.top();
                st.pop();
            }
            if (!st.empty()){
                st.pop();
            }
        }
        else{
            while (!st.empty() && prec(st.top())>=prec(s[i])){
                res += st.top();
                st.pop();
            }
            st.push(s[i]);
        }
    }
    while (!st.empty()){
        res += st.top();
        st.pop();
    }
    
    reverse(res.begin(),res.end());
    
    return res;
}