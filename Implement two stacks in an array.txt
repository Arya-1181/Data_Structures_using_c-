// MY Code
#include <bits/stdc++.h>

using namespace std;

class my_stack {
    
    private :
    
    int *arr;
    int size;
    int top1 , top2;
    
    public :
    
    my_stack(int n){
        arr = new int[n];
        size = n;
        top1 = size/2 - 1;
        top2 = size - 1;
    }
    
    void push1(int x){
        if (top1>=0){
            arr[top1] = x;
            cout<<"Data : "<<x<<"  inserted in stack_1 at : "<<top1<<endl;
            top1--;
            return;
        }
        else{
            cout<<"Stack 1 overflow for element : "<<x<<endl;
            return;
        }
    }
    
    void push2(int x){
        if (top2>=size/2){
            arr[top2] = x;
            cout<<"Data : "<<x<<"  inserted in stack_2 at : "<<top2<<endl;
            top2--;
            return;
        }
        else {
            cout<<"Stack 2 overflow for element : "<<x<<endl;
            return;
        }
    }
    
    void print(){
        cout<<"Top1 = "<<top1<<" & Top2 = "<<top2<<endl<<endl;
    }
    
    int pop1(){
        if(top1>=size/2 - 1){
            cout<<"Stack 1 Underflow "<<endl;
            return -1;
        }
        else {
            top1++;
            int x = arr[top1];
            cout<<"Data : "<<x<<" popped from stack_1 at : "<<top1<<endl;
            return x;
        }
    }
    
    int pop2(){
        if (top2>size-2){
            cout<<"Stack 2 Underflow "<<endl;
            return -1;
        }
        else {
            top2++;
            int x = arr[top2];
            cout<<"Data : "<<x<<" popped from stack_2 at : "<<top2<<endl;
            return x;
        }
    }
    
    ~my_stack(){
        for (int i=0; i<size; i++){
            cout<<arr[i]<<"  ";
        }
        cout<<endl;
    }
};

int main(){
    my_stack o(4);
    
    o.push1(1);
    o.push1(3);
    
    o.push2(2);
    o.push2(4);
    
    o.push1(5);
    o.push2(6);
    
    
    o.print();
    
    cout<<"Element from stack1 : "<<endl<<o.pop1()<<endl<<endl;
    cout<<"Element from stack1 : "<<endl<<o.pop1()<<endl<<endl;
    cout<<"Element from stack1 : "<<endl<<o.pop1()<<endl<<endl;
    
    o.print();
    
    cout<<"Element from stack2 : "<<endl<<o.pop2()<<endl<<endl;
    cout<<"Element from stack2 : "<<endl<<o.pop2()<<endl<<endl;
    cout<<"Element from stack2 : "<<endl<<o.pop2()<<endl<<endl;
    
    o.print();

    return 0;
}

// GFG Code
#include <iostream>

using namespace std;

class two_stack{
    int *arr;
    int size;
    int top1, top2;
    
    public:
    
    two_stack(int n){
        size = n;
        arr = new int[n];
        top1 = n/2 + 1;
        top2 = n/2;
        
    }
    
    void push1(int x){
        
        if (top1>0){
            top1--;
            arr[top1] = x;
            
        }
        else {
            cout<<"Stack Overflow by element : "<<x<<" in push 1 "<<  endl;
            return;
        }
    }
    
    void push2(int x){
        
        if (top2<size-1){
            top2++;
            arr[top2] = x;
        }
        
        else {
            cout<<"Stack Overflow by element : "<<x<<" in push 2 "<<endl;
            return;
        }
    }
    
    
    int pop1(){
        if (top1<=size/2){
            int x = arr[top1];
            top1--;
            return x;
        }
        else {
            cout<<"Stack Underflow"<<endl;
            exit(1);
        }
    }
    
    int pop2(){
        if (top2>=size/2 + 1){
            int x = arr[top2];
            top2--;
            return x;
        }
        else {
            cout<<"Stack Underflow"<<endl;
            exit(1);
        }
    }
};

int main(){
    int n;
    cin>>n;
    two_stack ob(n);
    ob.push1(1);
    ob.push2(2);
    ob.push1(3);
    ob.push2(4);
    ob.push1(5);
    ob.push2(6);
    
    cout<<"Popped element from stack 1 :"<<ob.pop1()<<endl;
    cout<<"Popped element from stack 2 :"<<ob.pop2()<<endl;
    return 0;
}
