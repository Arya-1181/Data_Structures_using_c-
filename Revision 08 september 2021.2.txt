#include <iostream>

using namespace std;

struct node{
    public:
    int data;
    node *next;
};

void reverse(node **head){
    node *before = new node();
    node *current = new node();
    node *after = new node();
    current = *head;
    before = NULL;
    after = NULL;
    while (current!=NULL){
        after = current -> next;
        current -> next = before;
        before = current;
        current = after;
    }
    *head = before;
}

void del(node *head,int key){
    node *temp = new node();
    node *before = new node();
    
    temp = head;
    before = NULL;
    while (temp->data!= key){
        before = temp;
        temp = temp -> next;
    }
    before -> next = temp -> next;
    free(temp);
}

void addfront(node **head,int key){
    node *temp=new node();
    temp -> data = key;
    temp -> next = *head;
    *head = temp;
}

int length(node *head){
    node *temp=NULL;
    temp = new node();
    temp = head;
    int count=0;
    while (temp!=0){
        temp = temp -> next;
        count++;
    }
    return count;
}

int getcount(node *head){
    node *temp=NULL;
    temp = head;
    if (temp==NULL)
    return 0;
    
    else 
    return 1 + getcount(temp -> next);
}
// Global variable causes memory leak
void gethead(node *head){
    if (head!=NULL){
        node *temp = head;
        head = head -> next;
        
        free (temp);
    }
} 
// Goes wrong if return value not assigned
node *gothead(node *head){
    if (head!=NULL){
        node *temp = head;
        head = head -> next;
        
        free (temp);
    }
    return head;
}
//Best method
void gettinghead(node **head){
    if (*head!=NULL){
        node *temp = *head;
        (*head) = (*head) -> next;
        
        free (temp);
    }
}

int main()
{
   node *head=NULL;
   node *second=NULL;
   node *third=NULL;
   node *forth=NULL;
   node *fifth=NULL;
   
   head = new node();
   second = new node();
   third = new node();
   forth = new node();
   fifth = new node();
   
   head -> data = 1;
   head -> next = second;
   
   second -> data = 2;
   second -> next = third;
   
   third -> data = 3;
   third -> next = forth;
   
   forth -> data = 4;
   forth -> next = fifth;
   
   fifth -> data = 5;
   fifth -> next = NULL;
   
   node *temp = fifth;
   
//   gethead(head);
//   gothead(head);
//   gettinghead(&head);

//    del(head,3);
    addfront(&head,10);
      reverse(&head);
    
    while (temp!=NULL){
       cout<<temp -> data<<" ";
       temp = temp -> next;
    }
    
    cout<<endl<<length(head)<<endl<<getcount(head)<<endl;
/*    
     while (temp!=NULL){
       cout<<temp -> data<<" ";
       temp = temp -> next;
    }
    */
   return 0;
}
