#include <bits/stdc++.h>

using namespace std;

struct node{
    public:
    int data;
    node *next;
};

// Splitting of linked list

void frontbacksplit(node *head, node **front, node **back){
    node *fast;
    node *slow;
    slow = head;
    fast = head -> next;
    while (fast!=NULL){
        fast = fast -> next;
        if (fast!= NULL){
            fast = fast -> next;
            slow = slow -> next;
        }
    }
    *front = head;
    *back = slow -> next;
    slow -> next = NULL;
}

// using iteration
node* merge(node* head, node* head2){
    node *a = head;
    node *b = head2;
    node *dummy = new node();
    node *c = dummy;
    while (a!=NULL && b!=NULL){
        if (a -> data <= b -> data){
            c -> next = a;
            a  = a -> next;
        }
        else if (b -> data < a -> data){
            c -> next = b;
            b = b -> next;
        }
        c = c -> next;
    }
    while (a!=NULL){
        c -> next = a;
        a = a -> next;
        c = c -> next;
    }
    while (b!=NULL){
        c -> next = b;
        b = b -> next;
        c = c -> next;
    }
    
    return dummy -> next;
}

//using recursion ( better method )
node *merge_through_recursion(node* head,node* head2){
    
    if (head==NULL)
    return head2;
    
    else if (head2==NULL)
    return head;
    
    node *result = NULL;
    if (head -> data < head2 -> data){
        result = head;
        result -> next = merge_through_recursion(head -> next,head2);
    }
    else {
        result = head2;
        result -> next = merge_through_recursion(head,head2 -> next);
    }
    return result;
}

// Merge 
void mergesort(node** headref){
    node* head = *headref;
    node *a;
    node *b;
    if (head==NULL||head -> next == NULL){
        return;
    }
    frontbacksplit(head,&a,&b);
    mergesort(&a);
    mergesort(&b);
    
    *headref = merge(a,b); 
}

int main()
{
   node *head=NULL;
   node *second=NULL;
   node *third=NULL;
   node *forth=NULL;
   node *fifth=NULL;
   node *head2=NULL;
   node *second2=NULL;
   node *third2=NULL;
   node *forth2=NULL;
   node *fifth2=NULL;
   
   head = new node();
   second = new node();
   third = new node();
   forth = new node();
   fifth = new node();
   head2 = new node();
   second2 = new node();
   third2 = new node();
   forth2 = new node();
   fifth2 = new node();
   
   head -> data = 1;
   head -> next = second;
   
   second -> data = 2;
   second -> next = third;
   
   third -> data = 3;
   third -> next = forth;
   
   forth -> data = 40;
   forth -> next = fifth;
   
   fifth -> data = 500;
   fifth -> next = head2;
   
   head2 -> data = 10;
   head2 -> next = second2;
   
   second2 -> data = 20;
   second2 -> next = third2;
   
   third2 -> data = 3000;
   third2 -> next = forth2;
   
   forth2 -> data = 140;
   forth2 -> next = fifth2;
   
   fifth2 -> data = 150;
   fifth2 -> next = NULL;
   
    mergesort(&head);
    
    node *temp = head;
    
    while (temp!=NULL){
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }

   return 0;
}
