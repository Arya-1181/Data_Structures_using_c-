#include <iostream>

using namespace std;

struct node{
    int data;
    node *next;
    node *prev;
};

void traversefront (node *head){
    node *temp = head;
    cout<<"Traverse from front : ";
    while (temp!=NULL){
        cout<<temp -> data<<"  ";
        temp = temp -> next;
    }
    cout<<endl;
}

void traverseback (node *tail){
    node *temp = tail;
    cout<<"Traverse from back : ";
    while (temp!=NULL){
        cout<<temp -> data<<"  ";
        temp = temp -> prev;
    }
    cout<<endl<<endl;
}

void addfront (node **head, int k){
    node *buffer = new node();
    buffer -> data = k;
    buffer -> next = (*head);
    (*head) -> prev = buffer;
    buffer -> prev = NULL;
    
    (*head) = buffer;
}

void addback (node **tail, int k){
    node *buffer = new node();
    buffer -> data = k;
    buffer -> next = NULL;
    (*tail) -> next = buffer;
    buffer -> prev = (*tail);
    
    (*tail) = buffer;
}

void addmiddle(node **before, int k){
    node *buffer = new node();
    buffer -> data = k;
    buffer -> next = (*before) -> next;
    (*before) -> next -> prev = buffer;
    (*before) -> next = buffer;
    buffer -> prev = (*before);
}

void delmiddle (node **head, int k){
    node *temp = (*head);
    node *before = NULL;
    while (temp -> data!=k){
        before = temp;
        temp = temp -> next;
    }
    
    before -> next = temp -> next;
    temp -> next -> prev = before;
    
    free (temp);
}

void delhead (node **head){
    node *temp = (*head);
    temp -> next -> prev = NULL;
    (*head) = temp -> next;
    
    free (temp);
}

void deltail (node **tail){
    node *temp = (*tail);
    temp -> prev -> next = NULL;
    (*tail) = temp -> prev;
    
    free (temp);
}

int main(){
    node *head = NULL;
    node *second = NULL;
    node *third = NULL;
    node *fourth = NULL;
    node *fifth = NULL;
    node *sixth = NULL;
    node *seventh = NULL;
    node *eighth = NULL;
    node *ninth = NULL;
    node *tenth = NULL;
    
    head = new node();
    second = new node();
    third = new node();
    fourth = new node();
    fifth = new node();
    sixth = new node();
    seventh = new node();
    eighth = new node();
    ninth = new node();
    tenth = new node();
    
    head -> data = 1;
    head -> next = second;
    head -> prev = NULL;
    
    second -> data = 2;
    second -> next = third;
    second -> prev = head;
    
    third -> data = 3;
    third -> next = fourth;
    third -> prev = second;
    
    fourth -> data = 4;
    fourth -> next = fifth;
    fourth -> prev = third;
    
    fifth -> data = 5;
    fifth -> next = sixth;
    fifth -> prev = fourth;
    
    sixth -> data = 6;
    sixth -> next = seventh;
    sixth -> prev = fifth;
    
    seventh -> data = 7;
    seventh -> next = eighth;
    seventh -> prev = sixth;
    
    eighth -> data = 9;
    eighth -> next = ninth;
    eighth -> prev = seventh;
    
    ninth -> data = 10;
    ninth -> next = tenth;
    ninth -> prev = eighth;
    
    tenth -> data = 11;
    tenth -> next = NULL;
    tenth -> prev = ninth;
    
    traversefront(head);
    traverseback(tenth);
    
    addfront(&head,100);
    addback(&tenth,500);
    
    traversefront(head);
    traverseback(tenth);
    
    addmiddle(&sixth,1000);
    traversefront(head);
    traverseback(tenth);
    
    delmiddle(&head,1000);
    traversefront(head);
    traverseback(tenth);
    
    delhead(&head);
    traversefront(head);
    traverseback(tenth);
    
    deltail(&tenth);
    traversefront(head);
    traverseback(tenth);
    
    return 0;
}




