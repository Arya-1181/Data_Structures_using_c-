#include <iostream>

using namespace std;

struct node{
    int data;
    node *next;
};

void traverse(node *head){
    node *temp = head;
    
    if (head==NULL)
    return;
    
    do {
        cout<<temp -> data<<"  ";
        temp = temp -> next;
    }while (temp!=head);
    cout<<endl;
}


void printcircular(node **head){
    node *current = *head;

    do {
        cout<<current -> data<<"  ";
        current = current -> next;
    }
    while (current!=NULL && current!=*head);
    cout<<endl;
}

void addsort(node *head, int k){
    node *temp = head;
    
    node *buffer = new node();
    buffer -> data = k;
    
    while (temp -> next -> data < k){
        temp = temp -> next;
    }
    
    buffer -> next = temp -> next;
    temp -> next = buffer;
}

int main(){
    node *head = NULL;
    node *second = NULL;
    node *third = NULL;
    node *fourth = NULL;
    node *fifth = NULL;
    node *sixth = NULL;
    node *seventh = NULL;
    node *eighth = NULL;
    node *ninth = NULL;
    node *tenth = NULL;
    
    head = new node();
    second = new node();
    third = new node();
    fourth = new node();
    fifth = new node();
    sixth = new node();
    seventh = new node();
    eighth = new node();
    ninth = new node();
    tenth = new node();
    
    head -> data = 1;
    head -> next = second;
    
    second -> data = 2;
    second -> next = third;
    
    third -> data = 3;
    third -> next = fourth;
    
    fourth -> data = 4;
    fourth -> next = fifth;
    
    fifth -> data = 5;
    fifth -> next = sixth;
    
    sixth -> data = 6;
    sixth -> next = seventh;
    
    seventh -> data = 7;
    seventh -> next = eighth;
    
    eighth -> data = 9;
    eighth -> next = ninth;
    
    ninth -> data = 10;
    ninth -> next = tenth;
    
    tenth -> data = 11;
    tenth -> next = head;
    
    printcircular(&head);

     addsort(head,8);
     addsort(head,5);
     addsort(head,11);
     traverse(head);
    
}